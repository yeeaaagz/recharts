/**
 * @fileOverview Y Axis
 */
import { Component } from 'react';
import PropTypes from 'prop-types';
import pureRender from '../util/PureRender';

@pureRender
class YAxis extends Component {

  static displayName = 'YAxis';

  static propTypes = {
    /**
     * Allow the ticks of YAxis to be decimals or not.
     */
    allowDecimals: PropTypes.bool,
    /**
     * Allow the axis has duplicated categorys or not when the type of axis is "category".
     */
    allowDuplicatedCategory: PropTypes.bool,
    /**
     * If set true, the axis do not display in the chart.
     */
    hide: PropTypes.bool,
    /**
     * The name of data displayed in the axis. This option will be used to represent an index in a
     * scatter chart.
     */
    name: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    /**
     * The unit of data displayed in the axis. This option will be used to represent an index unit
     * in a scatter chart.
     */
    unit: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    /**
     * The unique id of y-axis.
     */
    yAxisId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    /**
     * Specify the domain of axis when the axis is a number axis. The length of domain should be 2,
     * and we will validate the values in domain. And each element in the array can be a number,
     * 'auto', 'dataMin', 'dataMax', a string like 'dataMin - 20', 'dataMax + 100', or a function
     * that accepts a single argument and returns a number. If any element of domain is set to be
     * 'auto', comprehensible scale ticks will be calculated, and the final domain of axis is
     * generated by the ticks.
     */
    domain: PropTypes.arrayOf(PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.number,
      PropTypes.func,
      PropTypes.oneOf(['auto', 'dataMin', 'dataMax']),
    ])),
    /**
     * The key of data displayed in the axis.
     */
    dataKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]),
    /**
     * If set a string or a number, default label will be drawn, and the option is content. If set a
     * React element, the option is the custom react element of drawing label. If an object, the
     * option is the props of a new Label instance.
     */
    label: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.number,
      PropTypes.element,
      PropTypes.func,
      PropTypes.object
    ]),
    /**
     * Set the values of axis ticks manually. Ticks can be any type when the axis is the type of
     * category. Ticks must be numbers when the axis is the type of number.
     */
    ticks: PropTypes.array,
    /**
     * The count of ticks.
     */
    tickCount: PropTypes.number,
    /**
     * The formatter function of tick.
     */
    tickFormatter: PropTypes.func,
    /**
     * The margin between tick line and tick.
     */
    tickMargin: PropTypes.number,
    /**
     * The customized event handler of click on the ticks of this axis.
     */
    onClick: PropTypes.func,
    /**
     * The customized event handler of mousedown on the the ticks of this axis.
     */
    onMouseDown: PropTypes.func,
    /**
     * The customized event handler of mouseup on the ticks of this axis.
     */
    onMouseUp: PropTypes.func,
    /**
     * The customized event handler of mousemove on the ticks of this axis.
     */
    onMouseMove: PropTypes.func,
    /**
     * The customized event handler of mouseover on the ticks of this axis.
     */
    onMouseOver: PropTypes.func,
    /**
     * The customized event handler of mouseout on the ticks of this axis.
     */
    onMouseOut: PropTypes.func,
    /**
     * The customized event handler of moustenter on the ticks of this axis.
     */
    onMouseEnter: PropTypes.func,
    /**
     * The customized event handler of mouseleave on the ticks of this axis.
     */
    onMouseLeave: PropTypes.func,
    /**
     * The width of axis, which can be setted by user.
     */
    width: PropTypes.number,
    /**
     * The height of axis which is usually calculated internally.
     */
    height: PropTypes.number,
    /**
     * If set true, flips ticks around the axis line, displaying the labels inside the chart
     * instead of outside.
     */
    mirror: PropTypes.bool,
    /**
     * The orientation of axis.
     */
    orientation: PropTypes.oneOf(['left', 'right']),
    /**
     * The type of axis.
     */
    type: PropTypes.oneOf(['number', 'category']),
    /**
     * Specify the padding of y-axis. It's similar to padding of XAxis.
     */
    padding: PropTypes.shape({
      top: PropTypes.number,
      bottom: PropTypes.number,
    }),
    /**
     * When domain of the axis is specified and the type of the axis is 'number', if
     * allowDataOverflow is set to be false, the domain will be adjusted when the minimum value of
     * data is smaller than domain[0] or the maximum value of data is greater than domain[1] so that
     * the axis displays all data values. If set to true, graphic elements (line, area, bars) will
     * be clipped to conform to the specified domain.
     */
    allowDataOverflow: PropTypes.bool,
    /**
     * If 'auto' set, the scale function is decided by the type of chart, and the props type.
     */
    scale: PropTypes.oneOfType([
      PropTypes.oneOf(['auto', 'linear', 'pow', 'sqrt', 'log', 'identity', 'time',
        'band', 'point', 'ordinal', 'quantile', 'quantize', 'utc', 'sequential',
        'threshold']),
      PropTypes.func,
    ]),
    /**
     * If set false, no ticks will be drawn. If set a object, the option is the configuration of
     * ticks. If set a React element, the option is the custom react element of drawing ticks.
     */
    tick: PropTypes.oneOfType([
      PropTypes.bool, PropTypes.func, PropTypes.object, PropTypes.element,
    ]),
    /**
     * If set false, no axis line will be drawn. If set a object, the option is the configuration of
     * axis line.
     */
    axisLine: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
    /**
     * If set false, no axis tick lines will be drawn. If set a object, the option is the
     * configuration of tick lines.
     */
    tickLine: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
    /**
     * The minimum gap between two adjacent labels.
     */
    minTickGap: PropTypes.number,
    /**
     * The length of tick line.
     */
    tickSize: PropTypes.number,
    /**
     * If set 0, all the ticks will be shown. If set preserveStart", "preserveEnd" or
     * "preserveStartEnd", the ticks which is to be shown or hidden will be calculated
     * automatically.
     */
    interval: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf([
      'preserveStart', 'preserveEnd', 'preserveStartEnd',
    ])]),
    /**
     * Reverse the ticks or not.
     */
    reversed: PropTypes.bool,
  };

  static defaultProps = {
    allowDuplicatedCategory: true,
    allowDecimals: true,
    hide: false,
    orientation: 'left',
    width: 60,
    height: 0,
    mirror: false,
    yAxisId: 0,
    tickCount: 5,
    type: 'number',
    domain: [0, 'auto'],
    padding: { top: 0, bottom: 0 },
    allowDataOverflow: false,
    scale: 'auto',
    reversed: false,
  };

  render() {
    return null;
  }
}

export default YAxis;
