/**
 * @fileOverview X Axis
 */
import { Component } from 'react';
import PropTypes from 'prop-types';
import pureRender from '../util/PureRender';
import { SCALE_TYPES } from '../util/ReactUtils';

@pureRender
class XAxis extends Component {

  static displayName = 'XAxis';

  static propTypes = {
    /**
     * Allow the ticks of XAxis to be decimals or not.
     */
    allowDecimals: PropTypes.bool,
    /**
     * Allow the axis has duplicated categorys or not when the type of axis is "category".
     */
    allowDuplicatedCategory: PropTypes.bool,
    /**
     * If set true, the axis do not display in the chart.
     */
    hide: PropTypes.bool,
    /**
     * If set a string or a number, default label will be drawn, and the option is content. If set a React element, the option is the custom react element of drawing label. If an object, the option is the props of a new Label instance.
     */
    label: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.number,
      PropTypes.element,
      PropTypes.func,
      PropTypes.object
    ]),
    /**
     * The name of data displayed in the axis. This option will be used to represent an index in a scatter chart.
     */
    name: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    /**
     * The unit of data displayed in the axis. This option will be used to represent an index unit in a scatter chart.
     */
    unit: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    /**
     * The unique id of x-axis.
     */
    xAxisId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    /**
     * Specify the domain of axis when the axis is a number axis. The length of domain should be 2, and we will validate the values in domain. And each element in the array can be a number, 'auto', 'dataMin', 'dataMax', a string like 'dataMin - 20', 'dataMax + 100', or a function that accepts a single argument and returns a number. If any element of domain is set to be 'auto', comprehensible scale ticks will be calculated, and the final domain of axis is generated by the ticks.
     */
    domain: PropTypes.arrayOf(PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.number,
      PropTypes.func,
      PropTypes.oneOf(['auto', 'dataMin', 'dataMax']),
    ])),
    /**
     * The key of data displayed in the axis.
     */
    dataKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]),
    /**
     * The width of axis which is usually calculated internally.
     */
    width: PropTypes.number,
    /**
     * The height of axis, which can be setted by user.
     */
    height: PropTypes.number,
    /**
     * If set true, flips ticks around the axis line, displaying the labels inside the chart instead of outside.
     */
    mirror: PropTypes.bool,
    /**
     * The customized event handler of click on the ticks of this axis.
     */
    onClick: PropTypes.func,
    /**
     * The customized event handler of mousedown on the the ticks of this axis.
     */
    onMouseDown: PropTypes.func,
    /**
     * The customized event handler of mouseup on the ticks of this axis.
     */
    onMouseUp: PropTypes.func,
    /**
     * The customized event handler of mousemove on the ticks of this axis.
     */
    onMouseMove: PropTypes.func,
    /**
     * The customized event handler of mouseover on the ticks of this axis.
     */
    onMouseOver: PropTypes.func,
    /**
     * The customized event handler of mouseout on the ticks of this axis.
     */
    onMouseOut: PropTypes.func,
    /**
     * The customized event handler of moustenter on the ticks of this axis.
     */
    onMouseEnter: PropTypes.func,
    /**
     * The customized event handler of mouseleave on the ticks of this axis.
     */
    onMouseLeave: PropTypes.func,
    /**
     * The orientation of axis.
     */
    orientation: PropTypes.oneOf(['top', 'bottom']),
    /**
     * The type of axis.
     */
    type: PropTypes.oneOf(['number', 'category']),
    /**
     * Set the values of axis ticks manually. Ticks can be any type when the axis is the type of category. Ticks must be numbers when the axis is the type of number.
     */
    ticks: PropTypes.array,
    /**
     * The count of axis ticks. Not used if 'type' is 'category'.
     */
    tickCount: PropTypes.number,
    /**
     * The formatter function of tick.
     */
    tickFormatter: PropTypes.func,
    /**
     * Specify the padding of x-axis.
     */
    padding: PropTypes.shape({
      left: PropTypes.number,
      right: PropTypes.number,
    }),
    /**
     * When domain of the axis is specified and the type of the axis is 'number', if allowDataOverflow is set to be false, the domain will be adjusted when the minimum value of data is smaller than domain[0] or the maximum value of data is greater than domain[1] so that the axis displays all data values. If set to true, graphic elements (line, area, bars) will be clipped to conform to the specified domain.
     */
    allowDataOverflow: PropTypes.bool,
    /**
     * If set to 'auto', the scale function is decided by the type of chart, and the props type. When set to 'time', make sure to also set type to 'number' and to include a domain.
     */
    scale: PropTypes.oneOfType([PropTypes.oneOf(SCALE_TYPES), PropTypes.func]),
    /**
     * If set false, no ticks will be drawn. If set a object, the option is the configuration of ticks. If set a React element, the option is the custom react element of drawing ticks.
     */
    tick: PropTypes.oneOfType([
      PropTypes.bool, PropTypes.func, PropTypes.object, PropTypes.element,
    ]),
    /**
     * The margin between tick line and tick.
     */
    tickMargin: PropTypes.number,
    /**
     * If set false, no axis line will be drawn. If set a object, the option is the configuration of axis line.
     */
    axisLine: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
    /**
     * If set false, no axis tick lines will be drawn. If set a object, the option is the configuration of tick lines.
     */
    tickLine: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
    /**
     * The minimum gap between two adjacent labels.
     */
    minTickGap: PropTypes.number,
    /**
     * The length of tick line.
     */
    tickSize: PropTypes.number,
    /**
     * If set 0, all the ticks will be shown. If set preserveStart", "preserveEnd" or "preserveStartEnd", the ticks which is to be shown or hidden will be calculated automatically.
     */
    interval: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf([
      'preserveStart', 'preserveEnd', 'preserveStartEnd',
    ])]),
    /**
     * Reverse the ticks or not.
     */
    reversed: PropTypes.bool,
  };

  static defaultProps = {
    allowDecimals: true,
    hide: false,
    orientation: 'bottom',
    width: 0,
    height: 30,
    mirror: false,
    xAxisId: 0,
    tickCount: 5,
    type: 'category',
    domain: [0, 'auto'],
    padding: { left: 0, right: 0 },
    allowDataOverflow: false,
    scale: 'auto',
    reversed: false,
    allowDuplicatedCategory: true,
  };

  render() {
    return null;
  }
}

export default XAxis;
